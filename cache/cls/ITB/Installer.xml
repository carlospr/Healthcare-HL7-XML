<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="ITB.Installer">
<Super>%RegisteredObject</Super>
<TimeCreated>63538,61188.224321</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/_common/tools/Iberia/ITB/latest/cls/ITB/Installer.xml#7 $</Default>
</Parameter>

<Property name="InstallPath">
<Description>
Path to installation files</Description>
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Method name="Run">
<Description>
Run installer
pPath - Path to installation files.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPath:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ret = $$$OK
	set retTxt = "OK"
	set obj = ..%New()
	try {
		do obj.Log("ITB Installer started")
		set obj.InstallPath=pPath
		$$$THROWONERROR(tSC, obj.Install())
		$$$THROWONERROR(tSC, obj.Check())
	} catch ex {
		set ret = ex.AsStatus()
		set retTxt = $system.Status.GetOneErrorText(ret)
	}
	do obj.Log("ITB Installer ended")
	do obj.Log("Status="_retTxt)
	quit ret
]]></Implementation>
</Method>

<Method name="Install">
<Description>
Install files</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ret = $$$OK
	try {
		set errorlog=""
		
		do ..Log("Install Files started")
		
		// normalize path
		if ..InstallPath="" $$$ThrowStatus($$$ERROR($$$GeneralError,"path cannot be empty"))
		set itb=##class(%File).NormalizeDirectory("", ..InstallPath)
		if itb="" $$$ThrowStatus($$$ERROR($$$GeneralError,"path incorrect"))
		
		// includes
		set path = ##class(%File).SubDirectoryName(itb,"inc",1)
		if path="" $$$ThrowStatus($$$ERROR($$$GeneralError,"inc path incorrect"))
		do ..Log("__Importing includes...",1,0)
		do $system.OBJ.ImportDir(path, "*.inc", "/compile=1/display=none", .errorlog, 1, .imported, 0, .selectedlist)
		do ..Log("done",0,1)
		
		if +errorlog>0 {																					
			for i=1:1:errorlog do ..Log(errorlog(i),0,1)	
			$$$ThrowStatus($$$ERROR($$$GeneralError,"Errors detected while importing includes"))
		}
		
		// import classes
		set path = ##class(%File).SubDirectoryName(itb,"cls",1)
		if path="" $$$ThrowStatus($$$ERROR($$$GeneralError,"cls path incorrect"))
		do ..Log("__Importing classes...",1,0)
		do $system.OBJ.ImportDir(path, "*.xml", "/compile=1/display=none", .errorlog, 1, .imported, 0, .selectedlist)
		do ..Log("done",0,1)
		
		if +errorlog>0 {																					
			for i=1:1:errorlog do ..Log(errorlog(i),0,1)	
			$$$ThrowStatus($$$ERROR($$$GeneralError,"Errors detected while importing classes"))
		}
		
		// import hl7 schema
		set path = ##class(%File).SubDirectoryName(itb,"schema",1)
		if path="" $$$ThrowStatus($$$ERROR($$$GeneralError,"hl7 schema path incorrect"))
		do ..Log("__Importing hl7 schema...",1,0)
		do $system.OBJ.ImportDir(path, "*.xml", "/compile=1/display=none", .errorlog, 1, .imported, 0, .selectedlist)
		do ..Log("done",0,1)
		
		if +errorlog>0 {																					
			for i=1:1:errorlog do ..Log(errorlog(i),0,1)	
			$$$ThrowStatus($$$ERROR($$$GeneralError,"Errors detected while importing hl7 schemas"))
		}

		// lookup tables
		do ..Log("__Importing lookup tables...",1,0)
		for table="hl7_2_5.Lookup.xml","hl7_ITB.Lookup.xml","hl7_2_6.Lookup.xml" {
			// import hl7 xml group names
			set path = ##class(%File).SubDirectoryName(itb,"backup",1)_table
			if path="" $$$ThrowStatus($$$ERROR($$$GeneralError,table_" path incorrect"))
			set tSC=##class(Ens.Util.LookupTable).%Import(path)
			// check errors
			if $$$ISERR(tSC) {
				do ..Log($system.Status.GetOneErrorText(tSC),0,1)
				$$$ThrowStatus($$$ERROR($$$GeneralError,"Errors detected while importing lookup tables"))
			}
		}
		do ..Log("done",0,1)
		
		// import documentation
		do ..Log("__Importing documentation:",1,1)
		set path = ##class(%File).SubDirectoryName(itb,"backup",1)_"DOCITB.xml"
		if path="" $$$ThrowStatus($$$ERROR($$$GeneralError,"DOCITB.xml path incorrect"))
		set tSC=##class(ITB.Utils).LoadDoc(path)
		
		// copy documentation images to docbook csp application dir
		set url = "/csp/docbook"
		set setting=$$getapp^%SYS.cspServer(url_"/",.path)
		if setting'="" {
			set docbookDir=##class(%File).NormalizeDirectory($$GetFilename^%apiCSP(url_"/"))
			set docbookDir=##class(%File).SubDirectoryName(docbookDir,"images",1)
			set imageDir=##class(%File).SubDirectoryName(itb,"backup",1)
			set imageDir=##class(%File).SubDirectoryName(imageDir,"images",1)
			set image="itb_hl7xml.jpg"
			do ##class(%File).CopyFile(imageDir_image,docbookDir_image)
		}
		
		// check errors
		if $$$ISERR(tSC) {
			do ..Log($system.Status.GetOneErrorText(tSC),0,1)
			$$$ThrowStatus($$$ERROR($$$GeneralError,"Errors detected while importing documentation"))
		}
		
		// translations
		do ..Log("__Importing translations:",1,1)
		do ##class(ITB.EnsPortal.ProductionMonitor).Translation()
		
		do ..Log("Install Files ended")
	} catch ex {
		set ret = ex.AsStatus()
	}
	quit ret
]]></Implementation>
</Method>

<Method name="Check">
<Description>
Check installation</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ret = $$$OK
	set oldRoot = $get(^UnitTestRoot)
	try {
		do ..Log("ITB Checking started")
		set info = "ITB.Info"
		set exist = ##class(%Dictionary.ClassDefinition).%ExistsId("ITB.Info")
		if 'exist $$$ThrowStatus($$$ERROR($$$GeneralError,"ITB.Info does not exist!"))
		do ..Log("__"_info_".VERSION="_$parameter(info,"VERSION"))
		do ..Log("ITB Checking ended")
		
		do ..Log("ITB UnitTest",,0)
		set ^UnitTestRoot = ##class(%File).NormalizeDirectory("", ..InstallPath)
		set userParam = "v="_##class(ITB.Info).#VERSION
		$$$THROWONERROR(sc, ##class(%UnitTest.Manager).RunTest("cls/ITB/UnitTest",,userParam))
		do ..Log("",0,1)
		do ..Log("ITB UnitTest ended")
	} catch ex {
		set ret = ex.AsStatus()
	}
	set ^UnitTestRoot = oldRoot
	quit ret
]]></Implementation>
</Method>

<Method name="Log">
<Description>
Log a message
pText - Text message
pTimeStamp - Add a timestamp
pNewLine - Add a new line</Description>
<FormalSpec>pText:%String,pTimeStamp:%Boolean=1,pNewLine:%Boolean=1</FormalSpec>
<Implementation><![CDATA[	write $case(pTimeStamp,1:"["_$zdt($h,3)_"] ",:"")_pText_$case(pNewLine,1:$$$NL,:"")
]]></Implementation>
</Method>
</Class>
</Export>
