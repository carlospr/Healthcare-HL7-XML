<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="ITB.HL7.BO.TCPOperation">
<Description>
Standard HL7 ER7 Operation that has been extended to enable extra settings (e.g. NACKControl)</Description>
<Super>EnsLib.HL7.Operation.TCPOperation</Super>
<TimeCreated>63244,51141.096839</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id$</Default>
</Parameter>

<Property name="NACKControl">
<Description>
Enable NACK control. A SearchTable MUST be used. Configure a Service to receive async NACK messages and process them in ITB.HL7.BP.NACKProcess</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Parameter name="SETTINGS">
<Default>NACKControl,ReplyCodeActions,NoFailWhileDisconnected,SaveReplies</Default>
</Parameter>

<Method name="SendMessage">
<FormalSpec>pMsgOut:EnsLib.HL7.Message,*pMsgIn:EnsLib.HL7.Message,pExpectedSequenceNumber:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = ##super(pMsgOut,.pMsgIn,pExpectedSequenceNumber)
	
	try {
		if ..NACKControl {
			do ##class(ITB.HL7.Data.NACK).RemoveError(pMsgOut,..%RequestHeader.TargetConfigName)
		}
	} catch ex {
		$$$LOGERROR($system.Status.GetOneErrorText(ex.AsStatus()))
	}
	
	quit tSC
]]></Implementation>
</Method>
</Class>
</Export>
